// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: destination_sdk.proto

package fivetran_sdk_v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DestinationConnector_ConfigurationForm_FullMethodName = "/fivetran_sdk.v2.DestinationConnector/ConfigurationForm"
	DestinationConnector_Capabilities_FullMethodName      = "/fivetran_sdk.v2.DestinationConnector/Capabilities"
	DestinationConnector_Test_FullMethodName              = "/fivetran_sdk.v2.DestinationConnector/Test"
	DestinationConnector_DescribeTable_FullMethodName     = "/fivetran_sdk.v2.DestinationConnector/DescribeTable"
	DestinationConnector_CreateTable_FullMethodName       = "/fivetran_sdk.v2.DestinationConnector/CreateTable"
	DestinationConnector_AlterTable_FullMethodName        = "/fivetran_sdk.v2.DestinationConnector/AlterTable"
	DestinationConnector_Truncate_FullMethodName          = "/fivetran_sdk.v2.DestinationConnector/Truncate"
	DestinationConnector_WriteBatch_FullMethodName        = "/fivetran_sdk.v2.DestinationConnector/WriteBatch"
	DestinationConnector_WriteHistoryBatch_FullMethodName = "/fivetran_sdk.v2.DestinationConnector/WriteHistoryBatch"
)

// DestinationConnectorClient is the client API for DestinationConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Fivetran (grpc client) <> DestinationConnector (grpc server)
type DestinationConnectorClient interface {
	ConfigurationForm(ctx context.Context, in *ConfigurationFormRequest, opts ...grpc.CallOption) (*ConfigurationFormResponse, error)
	Capabilities(ctx context.Context, in *CapabilitiesRequest, opts ...grpc.CallOption) (*CapabilitiesResponse, error)
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	DescribeTable(ctx context.Context, in *DescribeTableRequest, opts ...grpc.CallOption) (*DescribeTableResponse, error)
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	AlterTable(ctx context.Context, in *AlterTableRequest, opts ...grpc.CallOption) (*AlterTableResponse, error)
	Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*TruncateResponse, error)
	WriteBatch(ctx context.Context, in *WriteBatchRequest, opts ...grpc.CallOption) (*WriteBatchResponse, error)
	WriteHistoryBatch(ctx context.Context, in *WriteHistoryBatchRequest, opts ...grpc.CallOption) (*WriteBatchResponse, error)
}

type destinationConnectorClient struct {
	cc grpc.ClientConnInterface
}

func NewDestinationConnectorClient(cc grpc.ClientConnInterface) DestinationConnectorClient {
	return &destinationConnectorClient{cc}
}

func (c *destinationConnectorClient) ConfigurationForm(ctx context.Context, in *ConfigurationFormRequest, opts ...grpc.CallOption) (*ConfigurationFormResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigurationFormResponse)
	err := c.cc.Invoke(ctx, DestinationConnector_ConfigurationForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationConnectorClient) Capabilities(ctx context.Context, in *CapabilitiesRequest, opts ...grpc.CallOption) (*CapabilitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CapabilitiesResponse)
	err := c.cc.Invoke(ctx, DestinationConnector_Capabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationConnectorClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, DestinationConnector_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationConnectorClient) DescribeTable(ctx context.Context, in *DescribeTableRequest, opts ...grpc.CallOption) (*DescribeTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeTableResponse)
	err := c.cc.Invoke(ctx, DestinationConnector_DescribeTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationConnectorClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, DestinationConnector_CreateTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationConnectorClient) AlterTable(ctx context.Context, in *AlterTableRequest, opts ...grpc.CallOption) (*AlterTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlterTableResponse)
	err := c.cc.Invoke(ctx, DestinationConnector_AlterTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationConnectorClient) Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*TruncateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TruncateResponse)
	err := c.cc.Invoke(ctx, DestinationConnector_Truncate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationConnectorClient) WriteBatch(ctx context.Context, in *WriteBatchRequest, opts ...grpc.CallOption) (*WriteBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteBatchResponse)
	err := c.cc.Invoke(ctx, DestinationConnector_WriteBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destinationConnectorClient) WriteHistoryBatch(ctx context.Context, in *WriteHistoryBatchRequest, opts ...grpc.CallOption) (*WriteBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteBatchResponse)
	err := c.cc.Invoke(ctx, DestinationConnector_WriteHistoryBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DestinationConnectorServer is the server API for DestinationConnector service.
// All implementations must embed UnimplementedDestinationConnectorServer
// for forward compatibility.
//
// Fivetran (grpc client) <> DestinationConnector (grpc server)
type DestinationConnectorServer interface {
	ConfigurationForm(context.Context, *ConfigurationFormRequest) (*ConfigurationFormResponse, error)
	Capabilities(context.Context, *CapabilitiesRequest) (*CapabilitiesResponse, error)
	Test(context.Context, *TestRequest) (*TestResponse, error)
	DescribeTable(context.Context, *DescribeTableRequest) (*DescribeTableResponse, error)
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	AlterTable(context.Context, *AlterTableRequest) (*AlterTableResponse, error)
	Truncate(context.Context, *TruncateRequest) (*TruncateResponse, error)
	WriteBatch(context.Context, *WriteBatchRequest) (*WriteBatchResponse, error)
	WriteHistoryBatch(context.Context, *WriteHistoryBatchRequest) (*WriteBatchResponse, error)
	mustEmbedUnimplementedDestinationConnectorServer()
}

// UnimplementedDestinationConnectorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDestinationConnectorServer struct{}

func (UnimplementedDestinationConnectorServer) ConfigurationForm(context.Context, *ConfigurationFormRequest) (*ConfigurationFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurationForm not implemented")
}
func (UnimplementedDestinationConnectorServer) Capabilities(context.Context, *CapabilitiesRequest) (*CapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Capabilities not implemented")
}
func (UnimplementedDestinationConnectorServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedDestinationConnectorServer) DescribeTable(context.Context, *DescribeTableRequest) (*DescribeTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTable not implemented")
}
func (UnimplementedDestinationConnectorServer) CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedDestinationConnectorServer) AlterTable(context.Context, *AlterTableRequest) (*AlterTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterTable not implemented")
}
func (UnimplementedDestinationConnectorServer) Truncate(context.Context, *TruncateRequest) (*TruncateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Truncate not implemented")
}
func (UnimplementedDestinationConnectorServer) WriteBatch(context.Context, *WriteBatchRequest) (*WriteBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteBatch not implemented")
}
func (UnimplementedDestinationConnectorServer) WriteHistoryBatch(context.Context, *WriteHistoryBatchRequest) (*WriteBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteHistoryBatch not implemented")
}
func (UnimplementedDestinationConnectorServer) mustEmbedUnimplementedDestinationConnectorServer() {}
func (UnimplementedDestinationConnectorServer) testEmbeddedByValue()                              {}

// UnsafeDestinationConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DestinationConnectorServer will
// result in compilation errors.
type UnsafeDestinationConnectorServer interface {
	mustEmbedUnimplementedDestinationConnectorServer()
}

func RegisterDestinationConnectorServer(s grpc.ServiceRegistrar, srv DestinationConnectorServer) {
	// If the following call pancis, it indicates UnimplementedDestinationConnectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DestinationConnector_ServiceDesc, srv)
}

func _DestinationConnector_ConfigurationForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationConnectorServer).ConfigurationForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationConnector_ConfigurationForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationConnectorServer).ConfigurationForm(ctx, req.(*ConfigurationFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationConnector_Capabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationConnectorServer).Capabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationConnector_Capabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationConnectorServer).Capabilities(ctx, req.(*CapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationConnector_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationConnectorServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationConnector_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationConnectorServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationConnector_DescribeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationConnectorServer).DescribeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationConnector_DescribeTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationConnectorServer).DescribeTable(ctx, req.(*DescribeTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationConnector_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationConnectorServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationConnector_CreateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationConnectorServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationConnector_AlterTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationConnectorServer).AlterTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationConnector_AlterTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationConnectorServer).AlterTable(ctx, req.(*AlterTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationConnector_Truncate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationConnectorServer).Truncate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationConnector_Truncate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationConnectorServer).Truncate(ctx, req.(*TruncateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationConnector_WriteBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationConnectorServer).WriteBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationConnector_WriteBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationConnectorServer).WriteBatch(ctx, req.(*WriteBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DestinationConnector_WriteHistoryBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteHistoryBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationConnectorServer).WriteHistoryBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationConnector_WriteHistoryBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationConnectorServer).WriteHistoryBatch(ctx, req.(*WriteHistoryBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DestinationConnector_ServiceDesc is the grpc.ServiceDesc for DestinationConnector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DestinationConnector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fivetran_sdk.v2.DestinationConnector",
	HandlerType: (*DestinationConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigurationForm",
			Handler:    _DestinationConnector_ConfigurationForm_Handler,
		},
		{
			MethodName: "Capabilities",
			Handler:    _DestinationConnector_Capabilities_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _DestinationConnector_Test_Handler,
		},
		{
			MethodName: "DescribeTable",
			Handler:    _DestinationConnector_DescribeTable_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _DestinationConnector_CreateTable_Handler,
		},
		{
			MethodName: "AlterTable",
			Handler:    _DestinationConnector_AlterTable_Handler,
		},
		{
			MethodName: "Truncate",
			Handler:    _DestinationConnector_Truncate_Handler,
		},
		{
			MethodName: "WriteBatch",
			Handler:    _DestinationConnector_WriteBatch_Handler,
		},
		{
			MethodName: "WriteHistoryBatch",
			Handler:    _DestinationConnector_WriteHistoryBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "destination_sdk.proto",
}
