// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: common.proto

package fivetran_sdk_v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TextField int32

const (
	TextField_PlainText TextField = 0
	TextField_Password  TextField = 1
	TextField_Hidden    TextField = 2
)

// Enum value maps for TextField.
var (
	TextField_name = map[int32]string{
		0: "PlainText",
		1: "Password",
		2: "Hidden",
	}
	TextField_value = map[string]int32{
		"PlainText": 0,
		"Password":  1,
		"Hidden":    2,
	}
)

func (x TextField) Enum() *TextField {
	p := new(TextField)
	*p = x
	return p
}

func (x TextField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextField) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (TextField) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x TextField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextField.Descriptor instead.
func (TextField) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type DataType int32

const (
	DataType_UNSPECIFIED    DataType = 0
	DataType_BOOLEAN        DataType = 1
	DataType_SHORT          DataType = 2
	DataType_INT            DataType = 3
	DataType_LONG           DataType = 4
	DataType_DECIMAL        DataType = 5
	DataType_FLOAT          DataType = 6
	DataType_DOUBLE         DataType = 7
	DataType_NAIVE_DATE     DataType = 8
	DataType_NAIVE_DATETIME DataType = 9
	DataType_UTC_DATETIME   DataType = 10
	DataType_BINARY         DataType = 11
	DataType_XML            DataType = 12
	DataType_STRING         DataType = 13
	DataType_JSON           DataType = 14
	DataType_NAIVE_TIME     DataType = 15
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "BOOLEAN",
		2:  "SHORT",
		3:  "INT",
		4:  "LONG",
		5:  "DECIMAL",
		6:  "FLOAT",
		7:  "DOUBLE",
		8:  "NAIVE_DATE",
		9:  "NAIVE_DATETIME",
		10: "UTC_DATETIME",
		11: "BINARY",
		12: "XML",
		13: "STRING",
		14: "JSON",
		15: "NAIVE_TIME",
	}
	DataType_value = map[string]int32{
		"UNSPECIFIED":    0,
		"BOOLEAN":        1,
		"SHORT":          2,
		"INT":            3,
		"LONG":           4,
		"DECIMAL":        5,
		"FLOAT":          6,
		"DOUBLE":         7,
		"NAIVE_DATE":     8,
		"NAIVE_DATETIME": 9,
		"UTC_DATETIME":   10,
		"BINARY":         11,
		"XML":            12,
		"STRING":         13,
		"JSON":           14,
		"NAIVE_TIME":     15,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

type RecordType int32

const (
	RecordType_UPSERT   RecordType = 0
	RecordType_UPDATE   RecordType = 1
	RecordType_DELETE   RecordType = 2
	RecordType_TRUNCATE RecordType = 3
)

// Enum value maps for RecordType.
var (
	RecordType_name = map[int32]string{
		0: "UPSERT",
		1: "UPDATE",
		2: "DELETE",
		3: "TRUNCATE",
	}
	RecordType_value = map[string]int32{
		"UPSERT":   0,
		"UPDATE":   1,
		"DELETE":   2,
		"TRUNCATE": 3,
	}
)

func (x RecordType) Enum() *RecordType {
	p := new(RecordType)
	*p = x
	return p
}

func (x RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (RecordType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordType.Descriptor instead.
func (RecordType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type ConfigurationFormRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigurationFormRequest) Reset() {
	*x = ConfigurationFormRequest{}
	mi := &file_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationFormRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationFormRequest) ProtoMessage() {}

func (x *ConfigurationFormRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationFormRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationFormRequest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type ConfigurationFormResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	SchemaSelectionSupported bool                   `protobuf:"varint,1,opt,name=schema_selection_supported,json=schemaSelectionSupported,proto3" json:"schema_selection_supported,omitempty"`
	TableSelectionSupported  bool                   `protobuf:"varint,2,opt,name=table_selection_supported,json=tableSelectionSupported,proto3" json:"table_selection_supported,omitempty"`
	Fields                   []*FormField           `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	Tests                    []*ConfigurationTest   `protobuf:"bytes,4,rep,name=tests,proto3" json:"tests,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ConfigurationFormResponse) Reset() {
	*x = ConfigurationFormResponse{}
	mi := &file_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationFormResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationFormResponse) ProtoMessage() {}

func (x *ConfigurationFormResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationFormResponse.ProtoReflect.Descriptor instead.
func (*ConfigurationFormResponse) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigurationFormResponse) GetSchemaSelectionSupported() bool {
	if x != nil {
		return x.SchemaSelectionSupported
	}
	return false
}

func (x *ConfigurationFormResponse) GetTableSelectionSupported() bool {
	if x != nil {
		return x.TableSelectionSupported
	}
	return false
}

func (x *ConfigurationFormResponse) GetFields() []*FormField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ConfigurationFormResponse) GetTests() []*ConfigurationTest {
	if x != nil {
		return x.Tests
	}
	return nil
}

type FormField struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Label       string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Required    *bool                  `protobuf:"varint,3,opt,name=required,proto3,oneof" json:"required,omitempty"`
	Description *string                `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*FormField_TextField
	//	*FormField_DropdownField
	//	*FormField_ToggleField
	//	*FormField_ConditionalFields
	Type          isFormField_Type `protobuf_oneof:"type"`
	DefaultValue  *string          `protobuf:"bytes,8,opt,name=default_value,json=defaultValue,proto3,oneof" json:"default_value,omitempty"`
	Placeholder   *string          `protobuf:"bytes,9,opt,name=placeholder,proto3,oneof" json:"placeholder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FormField) Reset() {
	*x = FormField{}
	mi := &file_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormField) ProtoMessage() {}

func (x *FormField) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormField.ProtoReflect.Descriptor instead.
func (*FormField) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *FormField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FormField) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FormField) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

func (x *FormField) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FormField) GetType() isFormField_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FormField) GetTextField() TextField {
	if x != nil {
		if x, ok := x.Type.(*FormField_TextField); ok {
			return x.TextField
		}
	}
	return TextField_PlainText
}

func (x *FormField) GetDropdownField() *DropdownField {
	if x != nil {
		if x, ok := x.Type.(*FormField_DropdownField); ok {
			return x.DropdownField
		}
	}
	return nil
}

func (x *FormField) GetToggleField() *ToggleField {
	if x != nil {
		if x, ok := x.Type.(*FormField_ToggleField); ok {
			return x.ToggleField
		}
	}
	return nil
}

func (x *FormField) GetConditionalFields() *ConditionalFields {
	if x != nil {
		if x, ok := x.Type.(*FormField_ConditionalFields); ok {
			return x.ConditionalFields
		}
	}
	return nil
}

func (x *FormField) GetDefaultValue() string {
	if x != nil && x.DefaultValue != nil {
		return *x.DefaultValue
	}
	return ""
}

func (x *FormField) GetPlaceholder() string {
	if x != nil && x.Placeholder != nil {
		return *x.Placeholder
	}
	return ""
}

type isFormField_Type interface {
	isFormField_Type()
}

type FormField_TextField struct {
	TextField TextField `protobuf:"varint,5,opt,name=text_field,json=textField,proto3,enum=fivetran_sdk.v2.TextField,oneof"`
}

type FormField_DropdownField struct {
	DropdownField *DropdownField `protobuf:"bytes,6,opt,name=dropdown_field,json=dropdownField,proto3,oneof"`
}

type FormField_ToggleField struct {
	ToggleField *ToggleField `protobuf:"bytes,7,opt,name=toggle_field,json=toggleField,proto3,oneof"`
}

type FormField_ConditionalFields struct {
	ConditionalFields *ConditionalFields `protobuf:"bytes,10,opt,name=conditional_fields,json=conditionalFields,proto3,oneof"`
}

func (*FormField_TextField) isFormField_Type() {}

func (*FormField_DropdownField) isFormField_Type() {}

func (*FormField_ToggleField) isFormField_Type() {}

func (*FormField_ConditionalFields) isFormField_Type() {}

type ConditionalFields struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Condition     *VisibilityCondition   `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Fields        []*FormField           `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConditionalFields) Reset() {
	*x = ConditionalFields{}
	mi := &file_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionalFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalFields) ProtoMessage() {}

func (x *ConditionalFields) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalFields.ProtoReflect.Descriptor instead.
func (*ConditionalFields) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *ConditionalFields) GetCondition() *VisibilityCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ConditionalFields) GetFields() []*FormField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type VisibilityCondition struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConditionField string                 `protobuf:"bytes,1,opt,name=condition_field,json=conditionField,proto3" json:"condition_field,omitempty"`
	// Types that are valid to be assigned to VisibleWhen:
	//
	//	*VisibilityCondition_BoolValue
	//	*VisibilityCondition_StringValue
	//	*VisibilityCondition_EmptyValue
	VisibleWhen   isVisibilityCondition_VisibleWhen `protobuf_oneof:"visible_when"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VisibilityCondition) Reset() {
	*x = VisibilityCondition{}
	mi := &file_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VisibilityCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisibilityCondition) ProtoMessage() {}

func (x *VisibilityCondition) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisibilityCondition.ProtoReflect.Descriptor instead.
func (*VisibilityCondition) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *VisibilityCondition) GetConditionField() string {
	if x != nil {
		return x.ConditionField
	}
	return ""
}

func (x *VisibilityCondition) GetVisibleWhen() isVisibilityCondition_VisibleWhen {
	if x != nil {
		return x.VisibleWhen
	}
	return nil
}

func (x *VisibilityCondition) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.VisibleWhen.(*VisibilityCondition_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *VisibilityCondition) GetStringValue() string {
	if x != nil {
		if x, ok := x.VisibleWhen.(*VisibilityCondition_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *VisibilityCondition) GetEmptyValue() bool {
	if x != nil {
		if x, ok := x.VisibleWhen.(*VisibilityCondition_EmptyValue); ok {
			return x.EmptyValue
		}
	}
	return false
}

type isVisibilityCondition_VisibleWhen interface {
	isVisibilityCondition_VisibleWhen()
}

type VisibilityCondition_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type VisibilityCondition_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type VisibilityCondition_EmptyValue struct {
	EmptyValue bool `protobuf:"varint,4,opt,name=empty_value,json=emptyValue,proto3,oneof"`
}

func (*VisibilityCondition_BoolValue) isVisibilityCondition_VisibleWhen() {}

func (*VisibilityCondition_StringValue) isVisibilityCondition_VisibleWhen() {}

func (*VisibilityCondition_EmptyValue) isVisibilityCondition_VisibleWhen() {}

type DropdownField struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DropdownField []string               `protobuf:"bytes,1,rep,name=dropdown_field,json=dropdownField,proto3" json:"dropdown_field,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropdownField) Reset() {
	*x = DropdownField{}
	mi := &file_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropdownField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropdownField) ProtoMessage() {}

func (x *DropdownField) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropdownField.ProtoReflect.Descriptor instead.
func (*DropdownField) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *DropdownField) GetDropdownField() []string {
	if x != nil {
		return x.DropdownField
	}
	return nil
}

type ToggleField struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToggleField) Reset() {
	*x = ToggleField{}
	mi := &file_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToggleField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleField) ProtoMessage() {}

func (x *ToggleField) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleField.ProtoReflect.Descriptor instead.
func (*ToggleField) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

type ConfigurationTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // unique identifier for the test
	Label         string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"` // A few words indicating what we are testing, e.g. 'Connecting to database'
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigurationTest) Reset() {
	*x = ConfigurationTest{}
	mi := &file_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationTest) ProtoMessage() {}

func (x *ConfigurationTest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationTest.ProtoReflect.Descriptor instead.
func (*ConfigurationTest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigurationTest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigurationTest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type TestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Configuration map[string]string      `protobuf:"bytes,2,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestRequest) Reset() {
	*x = TestRequest{}
	mi := &file_common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRequest) ProtoMessage() {}

func (x *TestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRequest.ProtoReflect.Descriptor instead.
func (*TestRequest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *TestRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestRequest) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type TestResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*TestResponse_Success
	//	*TestResponse_Failure
	Response      isTestResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestResponse) Reset() {
	*x = TestResponse{}
	mi := &file_common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResponse) ProtoMessage() {}

func (x *TestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResponse.ProtoReflect.Descriptor instead.
func (*TestResponse) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *TestResponse) GetResponse() isTestResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *TestResponse) GetSuccess() bool {
	if x != nil {
		if x, ok := x.Response.(*TestResponse_Success); ok {
			return x.Success
		}
	}
	return false
}

func (x *TestResponse) GetFailure() string {
	if x != nil {
		if x, ok := x.Response.(*TestResponse_Failure); ok {
			return x.Failure
		}
	}
	return ""
}

type isTestResponse_Response interface {
	isTestResponse_Response()
}

type TestResponse_Success struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3,oneof"`
}

type TestResponse_Failure struct {
	Failure string `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*TestResponse_Success) isTestResponse_Response() {}

func (*TestResponse_Failure) isTestResponse_Response() {}

type SchemaList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schemas       []*Schema              `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaList) Reset() {
	*x = SchemaList{}
	mi := &file_common_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaList) ProtoMessage() {}

func (x *SchemaList) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaList.ProtoReflect.Descriptor instead.
func (*SchemaList) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *SchemaList) GetSchemas() []*Schema {
	if x != nil {
		return x.Schemas
	}
	return nil
}

type TableList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tables        []*Table               `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableList) Reset() {
	*x = TableList{}
	mi := &file_common_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableList) ProtoMessage() {}

func (x *TableList) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableList.ProtoReflect.Descriptor instead.
func (*TableList) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *TableList) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

type Schema struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tables        []*Table               `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_common_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *Schema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

type DataTypeParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Params:
	//
	//	*DataTypeParams_Decimal
	//	*DataTypeParams_StringByteLength
	Params        isDataTypeParams_Params `protobuf_oneof:"params"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataTypeParams) Reset() {
	*x = DataTypeParams{}
	mi := &file_common_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataTypeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTypeParams) ProtoMessage() {}

func (x *DataTypeParams) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTypeParams.ProtoReflect.Descriptor instead.
func (*DataTypeParams) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (x *DataTypeParams) GetParams() isDataTypeParams_Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *DataTypeParams) GetDecimal() *DecimalParams {
	if x != nil {
		if x, ok := x.Params.(*DataTypeParams_Decimal); ok {
			return x.Decimal
		}
	}
	return nil
}

func (x *DataTypeParams) GetStringByteLength() int32 {
	if x != nil {
		if x, ok := x.Params.(*DataTypeParams_StringByteLength); ok {
			return x.StringByteLength
		}
	}
	return 0
}

type isDataTypeParams_Params interface {
	isDataTypeParams_Params()
}

type DataTypeParams_Decimal struct {
	Decimal *DecimalParams `protobuf:"bytes,1,opt,name=decimal,proto3,oneof"`
}

type DataTypeParams_StringByteLength struct {
	StringByteLength int32 `protobuf:"varint,2,opt,name=string_byte_length,json=stringByteLength,proto3,oneof"`
}

func (*DataTypeParams_Decimal) isDataTypeParams_Params() {}

func (*DataTypeParams_StringByteLength) isDataTypeParams_Params() {}

type DecimalParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Precision     uint32                 `protobuf:"varint,1,opt,name=precision,proto3" json:"precision,omitempty"`
	Scale         uint32                 `protobuf:"varint,2,opt,name=scale,proto3" json:"scale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecimalParams) Reset() {
	*x = DecimalParams{}
	mi := &file_common_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecimalParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecimalParams) ProtoMessage() {}

func (x *DecimalParams) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecimalParams.ProtoReflect.Descriptor instead.
func (*DecimalParams) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *DecimalParams) GetPrecision() uint32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *DecimalParams) GetScale() uint32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type ValueType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Inner:
	//
	//	*ValueType_Null
	//	*ValueType_Bool
	//	*ValueType_Short
	//	*ValueType_Int
	//	*ValueType_Long
	//	*ValueType_Float
	//	*ValueType_Double
	//	*ValueType_NaiveDate
	//	*ValueType_NaiveDatetime
	//	*ValueType_UtcDatetime
	//	*ValueType_Decimal
	//	*ValueType_Binary
	//	*ValueType_String_
	//	*ValueType_Json
	//	*ValueType_Xml
	//	*ValueType_NaiveTime
	Inner         isValueType_Inner `protobuf_oneof:"inner"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValueType) Reset() {
	*x = ValueType{}
	mi := &file_common_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueType) ProtoMessage() {}

func (x *ValueType) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueType.ProtoReflect.Descriptor instead.
func (*ValueType) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *ValueType) GetInner() isValueType_Inner {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *ValueType) GetNull() bool {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_Null); ok {
			return x.Null
		}
	}
	return false
}

func (x *ValueType) GetBool() bool {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_Bool); ok {
			return x.Bool
		}
	}
	return false
}

func (x *ValueType) GetShort() int32 {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_Short); ok {
			return x.Short
		}
	}
	return 0
}

func (x *ValueType) GetInt() int32 {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_Int); ok {
			return x.Int
		}
	}
	return 0
}

func (x *ValueType) GetLong() int64 {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_Long); ok {
			return x.Long
		}
	}
	return 0
}

func (x *ValueType) GetFloat() float32 {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_Float); ok {
			return x.Float
		}
	}
	return 0
}

func (x *ValueType) GetDouble() float64 {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_Double); ok {
			return x.Double
		}
	}
	return 0
}

func (x *ValueType) GetNaiveDate() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_NaiveDate); ok {
			return x.NaiveDate
		}
	}
	return nil
}

func (x *ValueType) GetNaiveDatetime() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_NaiveDatetime); ok {
			return x.NaiveDatetime
		}
	}
	return nil
}

func (x *ValueType) GetUtcDatetime() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_UtcDatetime); ok {
			return x.UtcDatetime
		}
	}
	return nil
}

func (x *ValueType) GetDecimal() string {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_Decimal); ok {
			return x.Decimal
		}
	}
	return ""
}

func (x *ValueType) GetBinary() []byte {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_Binary); ok {
			return x.Binary
		}
	}
	return nil
}

func (x *ValueType) GetString_() string {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_String_); ok {
			return x.String_
		}
	}
	return ""
}

func (x *ValueType) GetJson() string {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_Json); ok {
			return x.Json
		}
	}
	return ""
}

func (x *ValueType) GetXml() string {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_Xml); ok {
			return x.Xml
		}
	}
	return ""
}

func (x *ValueType) GetNaiveTime() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Inner.(*ValueType_NaiveTime); ok {
			return x.NaiveTime
		}
	}
	return nil
}

type isValueType_Inner interface {
	isValueType_Inner()
}

type ValueType_Null struct {
	Null bool `protobuf:"varint,1,opt,name=null,proto3,oneof"`
}

type ValueType_Bool struct {
	Bool bool `protobuf:"varint,2,opt,name=bool,proto3,oneof"`
}

type ValueType_Short struct {
	Short int32 `protobuf:"varint,3,opt,name=short,proto3,oneof"`
}

type ValueType_Int struct {
	Int int32 `protobuf:"varint,4,opt,name=int,proto3,oneof"`
}

type ValueType_Long struct {
	Long int64 `protobuf:"varint,5,opt,name=long,proto3,oneof"`
}

type ValueType_Float struct {
	Float float32 `protobuf:"fixed32,6,opt,name=float,proto3,oneof"`
}

type ValueType_Double struct {
	Double float64 `protobuf:"fixed64,7,opt,name=double,proto3,oneof"`
}

type ValueType_NaiveDate struct {
	NaiveDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=naive_date,json=naiveDate,proto3,oneof"`
}

type ValueType_NaiveDatetime struct {
	NaiveDatetime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=naive_datetime,json=naiveDatetime,proto3,oneof"`
}

type ValueType_UtcDatetime struct {
	UtcDatetime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=utc_datetime,json=utcDatetime,proto3,oneof"`
}

type ValueType_Decimal struct {
	Decimal string `protobuf:"bytes,11,opt,name=decimal,proto3,oneof"`
}

type ValueType_Binary struct {
	Binary []byte `protobuf:"bytes,12,opt,name=binary,proto3,oneof"`
}

type ValueType_String_ struct {
	String_ string `protobuf:"bytes,13,opt,name=string,proto3,oneof"`
}

type ValueType_Json struct {
	Json string `protobuf:"bytes,14,opt,name=json,proto3,oneof"`
}

type ValueType_Xml struct {
	Xml string `protobuf:"bytes,15,opt,name=xml,proto3,oneof"`
}

type ValueType_NaiveTime struct {
	NaiveTime *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=naive_time,json=naiveTime,proto3,oneof"`
}

func (*ValueType_Null) isValueType_Inner() {}

func (*ValueType_Bool) isValueType_Inner() {}

func (*ValueType_Short) isValueType_Inner() {}

func (*ValueType_Int) isValueType_Inner() {}

func (*ValueType_Long) isValueType_Inner() {}

func (*ValueType_Float) isValueType_Inner() {}

func (*ValueType_Double) isValueType_Inner() {}

func (*ValueType_NaiveDate) isValueType_Inner() {}

func (*ValueType_NaiveDatetime) isValueType_Inner() {}

func (*ValueType_UtcDatetime) isValueType_Inner() {}

func (*ValueType_Decimal) isValueType_Inner() {}

func (*ValueType_Binary) isValueType_Inner() {}

func (*ValueType_String_) isValueType_Inner() {}

func (*ValueType_Json) isValueType_Inner() {}

func (*ValueType_Xml) isValueType_Inner() {}

func (*ValueType_NaiveTime) isValueType_Inner() {}

type Table struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Columns       []*Column              `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_common_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

func (x *Table) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Table) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type Column struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          DataType               `protobuf:"varint,2,opt,name=type,proto3,enum=fivetran_sdk.v2.DataType" json:"type,omitempty"`
	PrimaryKey    bool                   `protobuf:"varint,3,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	Params        *DataTypeParams        `protobuf:"bytes,4,opt,name=params,proto3,oneof" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Column) Reset() {
	*x = Column{}
	mi := &file_common_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetType() DataType {
	if x != nil {
		return x.Type
	}
	return DataType_UNSPECIFIED
}

func (x *Column) GetPrimaryKey() bool {
	if x != nil {
		return x.PrimaryKey
	}
	return false
}

func (x *Column) GetParams() *DataTypeParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type Warning struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Warning) Reset() {
	*x = Warning{}
	mi := &file_common_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Warning) ProtoMessage() {}

func (x *Warning) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Warning.ProtoReflect.Descriptor instead.
func (*Warning) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

func (x *Warning) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Task struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_common_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

func (x *Task) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x76, 0x32, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x1a, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x83, 0x02, 0x0a,
	0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f,
	0x73, 0x64, 0x6b, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x05, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x22, 0xb3, 0x04, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x47, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f,
	0x77, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x64,
	0x6f, 0x77, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x74, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0b,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x53, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x48, 0x00, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x42,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b,
	0x2e, 0x76, 0x32, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64,
	0x6b, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x13, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x68, 0x65, 0x6e,
	0x22, 0x36, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x64,
	0x6f, 0x77, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x3d, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xba, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x22, 0x3b, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73,
	0x64, 0x6b, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x43, 0x0a, 0x0d,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x22, 0xae, 0x04, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x05, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12,
	0x3b, 0x0a, 0x0a, 0x6e, 0x61, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x00, 0x52, 0x09, 0x6e, 0x61, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0e,
	0x6e, 0x61, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x0d, 0x6e, 0x61, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x74, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x74, 0x63, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x18,
	0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x03, 0x78, 0x6d, 0x6c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x78, 0x6d, 0x6c, 0x12, 0x3b, 0x0a, 0x0a,
	0x6e, 0x61, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09,
	0x6e, 0x61, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x22, 0x4e, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x23, 0x0a, 0x07, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x20, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2a, 0x34, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x10, 0x02, 0x2a, 0xdb, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42,
	0x4c, 0x45, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x41, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x54, 0x43, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x4d, 0x4c, 0x10, 0x0c, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x4a,
	0x53, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x41, 0x49, 0x56, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x0f, 0x2a, 0x3e, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x55, 0x4e, 0x43,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x42, 0x22, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x1c, 0x66, 0x69, 0x76,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData []byte
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_proto_rawDesc), len(file_common_proto_rawDesc)))
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_common_proto_goTypes = []any{
	(TextField)(0),                    // 0: fivetran_sdk.v2.TextField
	(DataType)(0),                     // 1: fivetran_sdk.v2.DataType
	(RecordType)(0),                   // 2: fivetran_sdk.v2.RecordType
	(*ConfigurationFormRequest)(nil),  // 3: fivetran_sdk.v2.ConfigurationFormRequest
	(*ConfigurationFormResponse)(nil), // 4: fivetran_sdk.v2.ConfigurationFormResponse
	(*FormField)(nil),                 // 5: fivetran_sdk.v2.FormField
	(*ConditionalFields)(nil),         // 6: fivetran_sdk.v2.ConditionalFields
	(*VisibilityCondition)(nil),       // 7: fivetran_sdk.v2.VisibilityCondition
	(*DropdownField)(nil),             // 8: fivetran_sdk.v2.DropdownField
	(*ToggleField)(nil),               // 9: fivetran_sdk.v2.ToggleField
	(*ConfigurationTest)(nil),         // 10: fivetran_sdk.v2.ConfigurationTest
	(*TestRequest)(nil),               // 11: fivetran_sdk.v2.TestRequest
	(*TestResponse)(nil),              // 12: fivetran_sdk.v2.TestResponse
	(*SchemaList)(nil),                // 13: fivetran_sdk.v2.SchemaList
	(*TableList)(nil),                 // 14: fivetran_sdk.v2.TableList
	(*Schema)(nil),                    // 15: fivetran_sdk.v2.Schema
	(*DataTypeParams)(nil),            // 16: fivetran_sdk.v2.DataTypeParams
	(*DecimalParams)(nil),             // 17: fivetran_sdk.v2.DecimalParams
	(*ValueType)(nil),                 // 18: fivetran_sdk.v2.ValueType
	(*Table)(nil),                     // 19: fivetran_sdk.v2.Table
	(*Column)(nil),                    // 20: fivetran_sdk.v2.Column
	(*Warning)(nil),                   // 21: fivetran_sdk.v2.Warning
	(*Task)(nil),                      // 22: fivetran_sdk.v2.Task
	nil,                               // 23: fivetran_sdk.v2.TestRequest.ConfigurationEntry
	(*timestamppb.Timestamp)(nil),     // 24: google.protobuf.Timestamp
}
var file_common_proto_depIdxs = []int32{
	5,  // 0: fivetran_sdk.v2.ConfigurationFormResponse.fields:type_name -> fivetran_sdk.v2.FormField
	10, // 1: fivetran_sdk.v2.ConfigurationFormResponse.tests:type_name -> fivetran_sdk.v2.ConfigurationTest
	0,  // 2: fivetran_sdk.v2.FormField.text_field:type_name -> fivetran_sdk.v2.TextField
	8,  // 3: fivetran_sdk.v2.FormField.dropdown_field:type_name -> fivetran_sdk.v2.DropdownField
	9,  // 4: fivetran_sdk.v2.FormField.toggle_field:type_name -> fivetran_sdk.v2.ToggleField
	6,  // 5: fivetran_sdk.v2.FormField.conditional_fields:type_name -> fivetran_sdk.v2.ConditionalFields
	7,  // 6: fivetran_sdk.v2.ConditionalFields.condition:type_name -> fivetran_sdk.v2.VisibilityCondition
	5,  // 7: fivetran_sdk.v2.ConditionalFields.fields:type_name -> fivetran_sdk.v2.FormField
	23, // 8: fivetran_sdk.v2.TestRequest.configuration:type_name -> fivetran_sdk.v2.TestRequest.ConfigurationEntry
	15, // 9: fivetran_sdk.v2.SchemaList.schemas:type_name -> fivetran_sdk.v2.Schema
	19, // 10: fivetran_sdk.v2.TableList.tables:type_name -> fivetran_sdk.v2.Table
	19, // 11: fivetran_sdk.v2.Schema.tables:type_name -> fivetran_sdk.v2.Table
	17, // 12: fivetran_sdk.v2.DataTypeParams.decimal:type_name -> fivetran_sdk.v2.DecimalParams
	24, // 13: fivetran_sdk.v2.ValueType.naive_date:type_name -> google.protobuf.Timestamp
	24, // 14: fivetran_sdk.v2.ValueType.naive_datetime:type_name -> google.protobuf.Timestamp
	24, // 15: fivetran_sdk.v2.ValueType.utc_datetime:type_name -> google.protobuf.Timestamp
	24, // 16: fivetran_sdk.v2.ValueType.naive_time:type_name -> google.protobuf.Timestamp
	20, // 17: fivetran_sdk.v2.Table.columns:type_name -> fivetran_sdk.v2.Column
	1,  // 18: fivetran_sdk.v2.Column.type:type_name -> fivetran_sdk.v2.DataType
	16, // 19: fivetran_sdk.v2.Column.params:type_name -> fivetran_sdk.v2.DataTypeParams
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	file_common_proto_msgTypes[2].OneofWrappers = []any{
		(*FormField_TextField)(nil),
		(*FormField_DropdownField)(nil),
		(*FormField_ToggleField)(nil),
		(*FormField_ConditionalFields)(nil),
	}
	file_common_proto_msgTypes[4].OneofWrappers = []any{
		(*VisibilityCondition_BoolValue)(nil),
		(*VisibilityCondition_StringValue)(nil),
		(*VisibilityCondition_EmptyValue)(nil),
	}
	file_common_proto_msgTypes[9].OneofWrappers = []any{
		(*TestResponse_Success)(nil),
		(*TestResponse_Failure)(nil),
	}
	file_common_proto_msgTypes[13].OneofWrappers = []any{
		(*DataTypeParams_Decimal)(nil),
		(*DataTypeParams_StringByteLength)(nil),
	}
	file_common_proto_msgTypes[15].OneofWrappers = []any{
		(*ValueType_Null)(nil),
		(*ValueType_Bool)(nil),
		(*ValueType_Short)(nil),
		(*ValueType_Int)(nil),
		(*ValueType_Long)(nil),
		(*ValueType_Float)(nil),
		(*ValueType_Double)(nil),
		(*ValueType_NaiveDate)(nil),
		(*ValueType_NaiveDatetime)(nil),
		(*ValueType_UtcDatetime)(nil),
		(*ValueType_Decimal)(nil),
		(*ValueType_Binary)(nil),
		(*ValueType_String_)(nil),
		(*ValueType_Json)(nil),
		(*ValueType_Xml)(nil),
		(*ValueType_NaiveTime)(nil),
	}
	file_common_proto_msgTypes[17].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_proto_rawDesc), len(file_common_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
